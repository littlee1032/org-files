* What is scala? Why scala?
** What is scala
*** scale language: scripts -> big system
**** seamless cooperate with java
**** static type + OOP + FP
** Why scala
*** consie: less words, consie meaning
    val capital = Map("US" -> "Washington")
    capital += ("Japan" -> "Tokyo")
    println(capital("US"))
*** flexible: less word change
*** barzaar: (cathedral vs barzaar)
**** new type
     def factorial(x: BigInt): BigInt =
         if (x == 0) 1 else x * factorial(x-1)
**** new control
     actor {
         var sum = 0
         loop {
             receive {
                 case Data(bytes) => sum += hash(bytes)
                 case GetSum(requester) => requester ! sum
             }
         }
     }
* Learn scala
** Value and variable
   val msg = "Hello World"
   var msg = "Hello World"
** Function
   def max(x: Int, y: Int): Int = {
       if (x > y) x
       else y
   }
   def max(x: Int, y: Int) = if (x > y) x else y
** Scripts
   #!/bin/sh
   exec scala "$0" "$@"
   !#
   println("Hello World")
** Loop
   var i=0
   while (i < args.length) {
       println(args(i))
       i += 1
   }
   args.foreach((arg: String) => println(arg))
   args.foreach(println)
** Parameterize arrays (mutable)
   val greetStrings = new Array[String](3)
   greetStrings(0) = "....." ....
   for (i <- 0 to 2)
     print(greetStrings(i))
   val numNames = Array("zero", "one", "two")
** List (immutable)
   val oneTwoThree = List(1, 2, 3)
   val four = List(4)
   val oneTwoThreeFour = oneTwoThree ::: four
   val oneTwoThree = 1 :: List(2, 3) = 1 :: 2 :: 3 :: Nil

   val thrill = "Will" :: "fill" :: "until" :: Nil
   thrill(2)
   thrill.count(s=>s.length == 4)
   thrill.drop(2)
   thrill.dropRight(2)
   thrill.exists(s=>s == "until")
   thrill.filter(s=>s.length == 4)
   thrill.forall(s=>s.endsWith("l"))
   thrill.foreach(s=>print(s)) ....
** Tuple (immutable)
   val pair = (99, "ninetynine")
   println(pair._1)
   println(pair._2)
** Sets and maps
*** Sets
**** scala.collection.immutable.Set, scala.collection.mutable.Set
**** scala.collection.immutable.HashSet, scala.collection.mutable.HashSet
     var jetSet = Set("Boeing", "Airbus")
     jetSet += "Aaaa"

     val movieSet = Set("Despicable Me", "Singing in the Rain")
     movieSet += "Flipped"
*** Map
**** scala.collection.immutable.Map, scala.collection.mutable.Map
**** scala.collection.immutable.HashMap, scala.collection.mutable.HashMap
     import scala.collection.mutable.Map
     val treasureMap = Map[Int, String]()
     treasureMap += (1 -> "Go to island.")
     treasureMap += (2 -> "Find big X on ground")
     treasureMap += (3 -> "Dig.")
** Functional style
   def printArgs(args: Array[String]): Unit = {
       var i = 0
       while (i < args.length) {
           println(args(i))
           i += 1
       }

       for (arg <- args)
           println(arg)

       args.foreach(println)
   }

** Classes, fields and methods
   class A {
       .....
   }
   val a = new A
   class A {
       private var sum = 0
       def add(b: Byte): Unit = {
           b = 1 //won't compile
           sum += b
       }

       def add(b: Byte): Unit = sum += b
       def add(b: Byte) { sum += b }
   }
** Singleton object
*** classes in Scala can not have static members. Scala has singleton objects
    object A {
        def someMethod() : Unit {
        }
    }
** Functions and Closures
*** Methods
*** Local functions (another solution for private)
    def processFile(filename: String, width: Int) {
      def processLine(/*filename: String, width: Int, */line: String) {
        if (line.length > width)
          println(filename + ": " + line)
      }
      val source = Source.fromeFile(filename)
      for (line <- source.getLines()) {
        processLine(filename, width, line)
      }
    }

    def processLine(line: String) {
      if (line.length > width)
        println(filename + ": " + line)
    }
*** First-class functions
    var increase = (x: Int) => x + 1
    increase(10)
*** Short forms of function literals
    someNumbers.filter((x: Int) => x > 0)
    someNumbers.filter((x) => x > 0) (target typing)
    someNumbers.filter(x => x > 0)
*** Placeholder syntax
    someNumber.filter(_ > 0)
    val f = _ + _ (What's this?)
    val f = (_: Int) + (_:Int)
*** Parially applied functions
    def sum(a: Int, b: Int, c: Int) = a+b+c
    val a = sum _
    a(1, 2, 3)  // a.apply(1, 2, 3)
    val b = sum(1, _: Int, 3)
    b(2)
*** Closures
    var more = 1
    val addMore = (x: Int) => x + more
    addMore(10) // 11
    more = 9999
    addMore(10) // 10009

    val someNumbers = List(-11, -10, -5, 0 , 5, 10)
    var sum = 0
    someNumbers.foreach(sum += _)

    def makeIncreaser(more: Int) = (x: Int) => x + more
    makeIncreaser(10)
    makeIncreaser(1000)
*** Special function call forms
**** Repeated parameters
     def echo(args: String*) =
       for (arg <- args) println(arg)
**** Named arguments
     def speed(distance: Float, time: Float): Float = distance / time
     speed(distance = 100, time = 100)
     speed(time = 10, distance = 100)
**** Default parameter values
     def printTime(out: java.io.PrintStream = Console.out) = 
       out.println("time = " + System.currentTimeMillis())
*** Tail recursion
    def approximate(guess: Double): Double =
      if (isGoodEnough(guess)) guess
      else approximate(improve(guess))

    def bang(x: Int): Int =
      if (x == 0) throw new Exception("bang!")
      else bang(x-1)

    -g:notailcalls

**** limited: indirect, method rename
** Control Abstraction
*** high order function
   high order function ---> more oppotunity for reducing code duplication
   search problem:
   object FileMatcher {
     private def filesHere = (new java.io.File(".")).listFiles
     def filesEnding(query: String) =
       for (file <- filesHere; if file.getName.endsWith(query))
         yield file

     def filesContaining(query: String) = 
       for (file <- filesHere; if file.getName.contains(query))
         yield file

     def filesRegex(query: String) =
       for (file <- filesHere; if file.getName.matches(query))
         yield file
   }

   def fileMatching(query: String, method) =
     for (file <- filesHere; if file.getName.method(query))
       yield file

   Scala can not do this......

   def filesMathing(query: String, matcher: (String, String) => Boolean) = {
     for (file <- filesHere; if matcher(file.getName, query))
       yield file
   }

   def fileEnding(query: String) =
     filesMatching(query, _.endsWith(_))

   def containsNeg(name: List[Int]): Boolean = {
     var exists = false
     for (num <- nums)
       if (num < 0)
         exists = true
     exists
   }

   def containsNeg(nums: List[Int]) = nums.exists(_ < 0)

*** Curring
    def plainOldSum(x: Int, y: Int) = x + y

    def curriedSum(x: Int)(y: Int) = x + y

    def withPrintWriter(file: File, op: PrintWriter => Unit) {
      val writer = new PrintWriter(file)
      try {
        op(writer)
      } finally {
        writer.close()
      }
    }

    withPrintWriter(
      new File("data.txt"),
      writer => writer.println(new java.util.Date)
    )

    println {"Hello, world!"}

    val file = new File("data.txt")
    withPrintWriter(file) {
      writer => writer.println(new java.util.Date)
    }
*** By-name parameters
    var assertionsEnabled = true
    def myAssert(predicate: () => Boolean) =
      if (assertionsEnabled && !predicate)
        throw new AssertionError

    myAssert(() => 5 > 3)

    def byNameAssert(predicate: => Boolean) =
      if (assertionsEnabled && !predicate)
        throw new AssertionError

    byNameAssert(5 > 3)

    def booleanAssert(predicate: Boolean) =
      if (assertionsEnabled && !predicate)
        throw new AssertionError

** Composition and Inheritance
   val column1 = elem("hello") above elem("***")
   val column2 = elem("***") above elem("world")
   column1 beside column2

   hello ***
    *** world
*** Abstract class
abstract class Element {
  def contents: Array[String]
}
**** no 'abstract' needed
*** Defining parameterless methods
abstract class Element {
  def contents: Array[String]
  def height: Int = contents.length
  def width: Int = if (height == 0) 0 else contents(0).length
}
**** Uniform access priciple (Meyer, Object-Oriented Software Construction)
     client code should not be affected by a decision
to implement an attribute as a field or method.
    it is encouraged style in Scala to define methods that take no
parameters and have no side effects as parameterless methods, i.e., leaving
off the empty parentheses.
*** Extend class
class ArrayElement(conts: Array[String]) extends Element {
  def contents: Array[String] = conts
}
*** Override
in Scala, fields and methods belong to the same namespace

class ArrayElement(conts: Array[String]) extends Element {
  val contents: Array[String] = conts
}

Generally, Scala has just two namespaces for definitions in place of Java’s
four. Java’s four namespaces are fields, methods, types, and packages. By
contrast, Scala’s two namespaces are:
• values (fields, methods, packages, and singleton objects)
• types (class and trait names)

*** Polymorphism and dynamic binding (subtyping polymorphism)
abstract class Element {
  def demo() {
    println("Element's implementation invoked")
  }
}
class ArrayElement extends Element {
  override def demo() {
    println("ArrayElement's implementation invoked")
  }
}
class LineElement extends ArrayElement {
  override def demo() {
    println("LineElement's implementation invoked")
  }
}
** Scala hierarchy
   Any, Nothing, Null
*** Any
**** == != equals (can == direct call equals?)
**** ## hashCode (## different with hashCode?)
**** toString
*** AnyVal and AnyRef
**** AnyVal
***** Byte, Short, Char, Int, Long, Float, Double, Boolean
      literal and final (can not new)
      42 max 41
      1 until 5
      1 to 5
***** Unit
**** AnyRef (java.lang.Object)
*** Null
    null: subclass of every reference class
*** Nothing
    subclass of every other thing
    (why we need nothing?)
** Traits
trait Philosophical {
  def philosophize() {
    println("I consume memory, therefore I am!")
  }
}

class Frog extends Philosophical {
  override def toString = "green"
}

class Animal
trait HasLegs
class Frog extends Animal with Philosophical with HasLegs {
  override def toString = "green"
}

**** Traits vs class
***** traits have no class parameters
***** super (statically bound in class, dynamically bound in traits)
**** Thin vs rich interfaces
***** interface injection (trade-off)
**** Stackable modifications
     A queue of int:
     1. Doubling
     2. Incrementing
     3. Filtering

abstract class IntQueue {
  def get(): Int
  def put(x: Int)
}
import scala.collection.mutable.ArrayBuffer
class BasicIntQueue extends IntQueue {
  private val buf = new ArrayBuffer[Int]
  def get() = buf.remove(0)
  def put(x: Int) { buf += x }
}

trait Doubling extends IntQueue {
  abstract override def put(x: Int) { super.put(2 * x) }
}

class MyQueue extends BasicIntQueue with Doubling

trait Incrementing extends IntQueue {
  abstract override def put(x: Int) { super.put(x + 1) }
}
trait Filtering extends IntQueue {
  abstract override def put(x: Int) {
    if (x >= 0) super.put(x)
  }
}

val queue = (new BasicIntQueue with Incrementing with Filtering)
queue.put(-1); queue.put(0); queue.put(1)
queue.get() // 1
queue.get() // 2

Order is important.

**** linearation
class Animal
trait Furry extends Animal
trait HasLegs extends Animal
trait FourLegged extends HasLegs
class Cat extends Animal with Furry with FourLegged

Animal ===> AnyRef ===> Any
Furry ===> Animal ===> AnyRef ===> Any
FourLegged ===> HasLegs ===> Furry ===> Animal ===> AnyRef ===> Any
Cat ==> FourLegs ==> HasLegs ==> Furry ==> Animal ==> AnyRef ==> Any

**** to trait, or not to trait
***** If the behavior will not be reused, then make it a concrete class.
***** If it might be reused in multiple, unrelated classes, make it a trait.
***** If you want to inherit from it in Java code, use an abstract class.
***** If you plan to distribute it in compiled form, and you expect outside groups to write classes inheriting from it, you might lean towards using an abstract class.
***** If efficiency is very important, lean towards using a class.
***** If you still do not know, after considering the above, then start by making it as a trait.
** Case class and pattern matching
*** A simple sample
abstract class Expr
case class Var(name: String) extends Expr
case class Number(num: Double) extends Expr
case class UnOp(operator: String, arg: Expr) extends Expr
case class BinOp(operator: String, left: Expr, right: Expr) extends Expr
**** a factory method with name of the class
val op = Binary("+", Number(1), Var("x"))
**** all argument in the parameter list get a val prefix
v.name, op.operator
**** compiler adds hashCode, toString and equals
**** copy method
***** make a new instance
***** use the same value if no specifiy
op.copy(operator = "-")
*** pattern matching
simplification rules:
def simplifyTop(expr: Expr): Expr = expr match {
  case UnOp("-", UnOp("-", e)) => e
  // Double negation
  case BinOp("+", e, Number(0)) => e // Adding zero
  case BinOp("*", e, Number(1)) => e // Multiplying by one
  case _ => expr 
}
*** kinds of patterns
**** wild pattern
expr match {
 case BinOp(_, _, _) => println(expr +" is a binary operation")
 case _ => println("It's something else")
}
**** constant pattern
def describe(x: Any) = x match {
  case 5 => "five"
  case true => "truth"
  case "hello" => "hi!"
  case Nil => "the empty list"
  case _ => "something else"
}
**** variable pattern
expr match {
  case 0 => "zero"
  case somethingElse => "not zero: "+ somethingElse
}
**** constructor pattern (deep)
expr match {
  case BinOp("+", e, Number(0)) => println("a deep match")
  case _ =>
}
**** sequence pattern
expr match {
  case List(0, _, _) => println("found it")
  case _ =>
}
expr match {
  case List(0, _*) => println("found it")
  case _ =>
}
**** tuple pattern
expr match {
  case (a, b, c) => println("matched "+ a + b + c)
  case _ =>
}
**** typed pattern
def generalSize(x: Any) = x match {
  case s: String => s.length
  case m: Map[_, _] => m.size
  case _ => -1
}
def isIntIntMap(x: Any) = x match {
  case m: Map[Int, Int] => true
  case _ => false
} ?
def isStringArray(x: Any) = x match {
  case a: Array[String] => "yes"
  case _ => "no"
}
**** variable binding
expr match {
  case UnOp("abs", e @ UnOp("abs", _)) => e
  case _ =>
}
*** pattern guards
def simplifyAdd(e: Expr) = e match {
  case BinOp("+", x, x) => BinOp("*", x, Number(2))
  case _ => e
} ?
def simplifyAdd(e: Expr) = e match {
  case BinOp("+", x, y) if x == y => BinOp("*", x, Number(2))
  case _ => e
}
*** The Option type
**** Two forms of value: Some(x) and None
val capitals =
Map("France" -> "Paris", "Japan" -> "Tokyo")
capitals get "France"
capitals get "North Pole"

def show(x: Option[String]) = x match {
  case Some(s) => s
  case None => "?"
}
show(capitals get "Japan")
show(capitals get "North Pole")

**** vs null in Java
*** Pattern everywhere
**** Patterns in variable definitions
val myTuple = (123, "abc")
val (number, string) = myTuple
**** Case sequences as partial functions (more entries)
val withDefault: Option[Int] => Int = {
  case Some(x) => x
  case None => 0
}
withDefault(Some(10))
withDefault(None)
**** Patterns in for expressions
for ((country, city) <- capitals)
  println("The capital of "+ country +" is "+ city)
** Type parameterize
*** Fuctional queues
head returns the first element of the queue
tail returns a new queue with a given element
enqueue appended at the end
fully persistent

class SlowAppendQueue[T](elems: List[T]) { // Not efficient
  def head = elems.head
  def tail = new SlowAppendQueue(elems.tail)
  def enqueue(x: T) = new SlowAppendQueue(elems ::: List(x))
}

class SlowHeadQueue[T](smele: List[T]) { // Not efficient
  // smele is elems reversed
  def head = smele.last
  def tail = new SlowHeadQueue(smele.init)
  def enqueue(x: T) = new SlowHeadQueue(x :: smele)
}

class Queue[T](
  private val leading: List[T],
  private val trailing: List[T]
) {
  private def mirror =
    if (leading.isEmpty)
      new Queue(trailing.reverse, Nil)
    else
      this
  def head = mirror.leading.head
  def tail = {
    val q = mirror
    new Queue(q.leading.tail, q.trailing)
  }
  def enqueue(x: T) =
    new Queue(leading, x :: trailing)
}

*** Information hiding
The efficiency is paid for by exposing a needlessly detailed implementation.
The Queue constructor, which is globally accessible, takes two lists as parameters, where one is
reversed—hardly an intuitive representation of a queue.
**** Private contructors and factory methods
class Queue[T] private (
  private val leading: List[T],
  private val trailing: List[T]
)
def this(elems: T*) = this(elems.toList, Nil)

object Queue {
  // constructs a queue with initial elements ‘xs’
  def apply[T](xs: T*) = new Queue[T](xs.toList, Nil)
}
Queue(1, 2, 3) ===> Queue.apply(1, 2, 3)

**** An alternative: private classes
Another, more radical way is to hide the class itself
and only export a trait that reveals the public interface
of the class.

trait Queue[T] {
  def head: T
  def tail: Queue[T]
  def enqueue(x: T): Queue[T]
}
object Queue {
  def apply[T](xs: T*): Queue[T] =
    new QueueImpl[T](xs.toList, Nil)
  private class QueueImpl[T](
    private val leading: List[T],
    private val trailing: List[T]
  ) extends Queue[T] {
    def mirror =
    if (leading.isEmpty)
      new QueueImpl(trailing.reverse, Nil)
    else
      this
    def head: T = mirror.leading.head
    def tail: QueueImpl[T] = {
      val q = mirror
      new QueueImpl(q.leading.tail, q.trailing)
    }
    def enqueue(x: T) =
      new QueueImpl(leading, x :: trailing)
  }
}

*** Variance annotations
You cannot create variables of type Queue
def doesNotCompile(q: Queue) {}
def doesCompile(q: Queue[AnyRef]) {}

Questions raised:
Covariant: if S is a subtype of type T, then should Queue[S] be considered a subtype of Queue[T]?

Scala by default is non-variant: A Queue[String] would not be usable as a Queue[AnyRef].
But you can demand that by:
trait Queue[+T] { ... }

Contravariant: if T is a subtype of type S, this would imply that Queue[S] is a sub-type of Queue[T]
trait Queue[-T] { ... }

In a pure functional world, many types are natually covariant. But in mutable data:

class Cell[T](init: T) {
  private[this] var current = init
  def get = current
  def set(x: T) { current = x }
}

val c1 = new Cell[String]("abc")
val c2: Cell[Any] = c1
c2.set(1)
val s: String = c1.get

Cell.scala:7: error: covariant type T occurs in
contravariant position in type T of value x
def set(x: T) = current = x
           ˆ
*** Checking variance annotations
*** Lower bounds
class Queue[+T] (private val leading: List[T],
  private val trailing: List[T] ) {
  def enqueue[U >: T](x: U) =
    new Queue[U](leading, x :: trailing) // ...
}

*** Contravariance
trait OutputChannel[-T] {
  def write(x: T)
}

Liskov Substitution Principle:
It is safe to assume that a type T is a subtype of a type U if you can sub-
stitute a value of type T wherever a value of type U is required
The principle holds if T supports the same operations as U and all of T’s 
operations require less and provide more than the corresponding operations 
in U.

S => T

trait Function1[-S, +T] {
  def apply(x: S): T
}

** Abstract member
trait Abstract {
  type T
  def transform(x: T): T
  val initial: T
  var current: T
}

class Concrete extends Abstract {
  type T = String
  def transform(x: String) = x + x
  val initial = "hi"
  var current = initial
}
*** types
**** type keyword
**** more consice than verbose name
**** require subclass to defined it
class Food
abstract class Animal {
  def eat(food: Food)
}
class Grass extends Food
class Cow extends Animal {
  override def eat(food: Grass) {} // This won’t compile
}

class Food
abstract class Animal {
  type SuitableFood <: Food
  def eat(food: SuitableFood)
}
class Grass extends Food
class Cow extends Animal {
  type SuitableFood = Grass
  override def eat(food: Grass) {}
}

*** vals
  val initial: String
**** value given by the subclass
*** vars
*** methods
*** Stuctural subtyping (duck typing)
**** nominal type (verbose)
**** duck typing
class Pasture {
  var animals: List[Animal { type SuitableFood = Grass }] = Nil
}

using(new PrintWriter("date.txt")) { writer =>
  writer.println(new Date)
}
using(serverSocket.accept()) { socket =>
  socket.getOutputStream().write("hello, world\n".getBytes)
}
def using[T, S](obj: T)(operation: T => S) = {
  val result = operation(obj)
  obj.close()
  // type error!
  result
}
def using[T <: { def close(): Unit }, S](obj: T)
  (operation: T => S) = {
  val result = operation(obj)
  obj.close()
  result
}
** Implicit conversions and parameters
val button = new JButton
button.addActionListener(
  new ActionListener {
    def actionPerformed(event: ActionEvent) {
      println("pressed!")
    }
  }
)

button.addActionListener( // Type mismatch!
  (_: ActionEvent) => println("pressed!")
)

implicit def function2ActionListener(f: ActionEvent => Unit) =
  new ActionListener {
    def actionPerformed(event: ActionEvent) = f(event)
  }

button.addActionListener(
  (_: ActionEvent) => println("pressed!")
)

*** Rules for implicits
**** Marking Rule: Only definitions marked implicit are available
**** Scope Rule: An inserted implicit conversion must be in scope as a single identifier, or be associated with the source or target type of the conversion.
**** One-at-a-time Rule: Only one implicit is tried.
**** Explicits-First Rule: Whenever code type checks as it is written, no implicits are attempted.
*** Where implicits are tried.
**** Implicit conversion to an expected type
val i: Int = 3.5
implicit def doubleToInt(x: Double) = x.toInt
**** Converting the receiver
***** Interoperating with new types
class Rational(n: Int, d: Int) {
...
  def + (that: Rational): Rational = ...
  def + (that: Int): Rational = ...
}
val oneHalf = new Rational(1, 2)
1 + oneHalf ?
implicit def intToRational(x: Int) = new Rational(x, 1)
***** Simulating new syntax
Map(1 -> "one", 2 -> "two", 3 -> "three")
object Predef {
  class ArrowAssoc[A](x: A) {
    def -> [B](y: B): Tuple2[A, B] = Tuple2(x, y)
  }
  implicit def any2ArrowAssoc[A](x: A): ArrowAssoc[A] =
    new ArrowAssoc(x)
  ...
}

**** Implicit parameters
object Greeter {
  def greet(name: String)(implicit prompt: PreferredPrompt) {
    println("Welcome, "+ name +". The system is ready.")
    println(prompt.preference)
  }
}
val bobsPrompt = new PreferredPrompt("relax> ")
Greeter.greet("Bob")(bobsPrompt)

object JoesPrefs {
  implicit val prompt = new PreferredPrompt("Yes, master> ")
}
import JoesPrefs._
Greeter.greet("Joe")

def maxListUpBound[T <: Ordered[T]](elements: List[T]): T = elements match {
  case List() => throw new IllegalArgumentException("empty list!")
  case List(x) => x
  case x :: rest =>
    val maxRest = maxListUpBound(rest)
    if (x > maxRest) x
    else maxRest
}

def maxListImpParm[T](elements: List[T])
  (implicit orderer: T => Ordered[T]): T =
    elements match {
      case List() => throw new IllegalArgumentException("empty list!")
      case List(x) => x
      case x :: rest =>
        val maxRest = maxListImpParm(rest)
        if (x > maxRest) x
        else maxRest
    }

maxListImpParm(List(1,5,10,3))
maxListImpParm(List(1.5, 5.2, 10.7, 3.14159))

** Implementing lists
** Actor and concurrency
share nothing, message passing
*** actor: thread-like entity with a mailbox for receiving messages
import scala.actors._
object SillyActor extends Actor {
  def act() {
    for (i <- 1 to 5) {
      println("I'm acting!")
      Thread.sleep(1000)
    }
  }
}
SillyActor.start(); SeriousActor.start()

val seriousActor2 = actor {
  for (i <- 1 to 5)
    println("That is the question.")
  Thread.sleep(1000)
}

How communicate?

val echoActor = actor {
  while (true) {
    receive {
      case msg => println("received message: "+ msg)
    }
  }
}

echoActor ! "hi there"

*** react: Better performance through thread reuse
**** no return, no need tp preserve the call stack
object NameResolver extends Actor {
import java.net.{InetAddress, UnknownHostException}
  def act() {
    react {
      case (name: String, actor: Actor) =>
        actor ! getIp(name)
        act()
      case "EXIT" =>
        println("Name resolver exiting.")
        // quit
      case msg =>
        println("Unhandled message: "+ msg)
        act()
    }
  }
  def getIp(name: String): Option[InetAddress] = {
    try {
      Some(InetAddress.getByName(name))
    } catch {
      case _:UnknownHostException => None
    }
  }
}

scala> NameResolver ! ("www.scala-lang.org", self)
scala> self.receiveWithin(0) { case x => x }
res2: Any = Some(www.scala-lang.org/128.178.154.102)
scala> NameResolver ! ("wwwwww.scala-lang.org", self)
scala> self.receiveWithin(0) { case x => x }
res4: Any = None
*** Good actor style
**** Actors should not block
**** Communicate with actors only via messages
**** Prefer immutable messages
**** Make messages self-contained
* Resources
** [[https://wiki.scala-lang.org/display/SW/ScalaDays%2B2011%2BResources][Scala Days 2011]]
