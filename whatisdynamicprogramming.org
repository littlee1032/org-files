* Dynamic programing language
** What is dynamic programming language
*** Modification at runtime (class, object, method)
*** Dynamic typed (mostly)
** Is java a dynamic programming language?
*** JIT inlining?
*** JVMTI redefineClass?
** Important characteristics
*** eval, REPL(read-eval-print loop)
>>> x = 1
>>> print x
1
>>> x = "Hello World"
>>> print x
Hello World
>>>
*** Mixins: an interface with method implemented
**** Extend existing classes without any modification
**** Keep component seperate
**** No new classes created
>>> class Person: pass
... 
>>> p = Person()
>>> p.hello()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: Person instance has no attribute 'hello'
>>> class Friendly:
...     def hello(self):
...             print "Hello World"
... 
>>> Person.__bases__ += (Friendly,)
>>> p.hello()
Hello World
*** Closures:
>>> def add_n(n):
...     def f(m):
...             return n+m
...     return f
... 
>>> add_2=add_n(2)
>>> add_2(0)
2
>>> add_3=add_n(3)
>>> add_3(2)
5
>>> 

def outer():
    y = 0
    def inner():
        nonlocal y
        y += 1
        return y
    return inner
 
f = outer()
print(f(), f(), f()) #prints 1 2 3

**** what is closure? where is closure in java?
*** Fuction language features
**** Continuation
(callcc (lambda (return)
         (begin
           (display "one")
           (return #t)
           (display "two")
           #f)))
one
;Value: #t
(define callcc call-with-current-continuation)
(define (generate-one-element-atatime lst)
    (define (control-state return)
    (for-each
            (lambda (element)
                    (callcc
                    (lambda (resume-here)
                        (set! control-state resume-here)
                        (return element)))
            )
            lst)
    (return 'you-fell-off-the-end))
    (define (generator)
    (callcc control-state))
    generator)
(define generate-digit
    (generate-one-element-atatime '(0 1 2 3 4 5 6 7 8 9)))
(generate-digit)
**** Lazy evaluation (call by need)
object FibTest {
  def fib(n: int): int = n match {
    case 0 => 0
    case 1 => 1
    case _ => fib(n-1)+fib(n-2)
  }
}

import Future._
var a = lazy({ FibTest.fib(42) })
Console.println(a)
  => Lazy(?)
a+1
 => 267914297
a+2
 => 267914298

**** Tail Recursion
(define (fatorial n)
  (if (= n 0)
       1
       (* n (factorial (- n 1)))))

(define (factorial n)
  (fact-iter 1 1 n))
(define (fact-iter product counter max-count)
  (if (> counter max-count)
    product
    (fact-iter (* counter product)
               (+ counter 1)
               max-count)))
